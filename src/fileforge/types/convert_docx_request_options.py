# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from ..core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1


class ConvertDocxRequestOptions(pydantic_v1.BaseModel):
    """
    Conversion options. This field is required even if empty.

    **Options**

    - `templateLiterals`: Map of template literals to replace in the document. Template literals should be enclosed in double curly braces, e.g. `{{name}}`. Variables name can contain alphanumeric characters and hyphens. All variables are case-sensitive. The value for each variable should be a string. If a value of undefined is passed, the variable will not be removed from the document. If you need to remove a variable, pass an empty string as the value.

    **NB** variables should **not** have surrounding spaces, e.g. `{{ name }}`.

    **Example**

    In the Word document: `{{name}} {{nickname}}. was born on {{date}}.`

    ```json
    {
      "templateLiterals": {
        "name": "John Doe",
        "date": "2021-12-31",
        "nickname": ""
      }
    }
    ```

    There will not be an error if a variable is not found in the document, nor if variables found in the document are not in the options.
    """

    template_literals: typing.Optional[typing.Dict[str, str]] = pydantic_v1.Field(
        alias="templateLiterals", default=None
    )
    """
    Map of template literals to replace in the document.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        populate_by_name = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
